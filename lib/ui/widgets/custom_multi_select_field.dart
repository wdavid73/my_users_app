import 'package:flutter/material.dart';
import 'package:flutter_starter_kit/config/config.dart';

/// A customizable multi-select field widget.
///
/// This widget provides a selectable list in a bottom sheet, allowing users
/// to select multiple items from a list. The selected items are displayed in
/// the text field as a concatenated string using the [displayTextBuilder].
///
/// It supports customization for labels, hints, helper text, and error messages.
class CustomMultiSelectField extends StatefulWidget {
  /// The hint text to display inside the text field when no items are selected.
  final String hintText;

  /// The label text to display above the text field.
  final String? label;

  /// The helper text to display below the text field.
  final String? helperText;

  /// The error message to display below the text field.
  final String? errorMessage;

  /// The list of items to display in the selectable list.
  final List<String> items;

  /// The list of items that are currently selected.
  final List<String> selectedItems;

  /// A callback function that is called when the selected items change.
  final Function(List<String>) onSelectedItemsChanged;

  /// A function to build the display text based on the selected items.
  final String Function(List<String>?) displayTextBuilder;

  /// An optional function to build custom widgets for each selectable item.
  final Widget Function(String)? titleBuilder;

  /// An optional controller to control the text field.
  final TextEditingController? controller;

  /// Creates a [CustomMultiSelectField].
  const CustomMultiSelectField({
    super.key,
    this.controller,
    required this.items,
    required this.selectedItems,
    required this.onSelectedItemsChanged,
    required this.displayTextBuilder,
    required this.hintText,
    this.titleBuilder,
    this.label,
    this.helperText,
    this.errorMessage,
  });

  @override
  State<CustomMultiSelectField> createState() => _CustomMultiSelectFieldState();
}

class _CustomMultiSelectFieldState extends State<CustomMultiSelectField> {
  late TextEditingController _internalController;

  @override
  void initState() {
    _internalController = widget.controller ?? TextEditingController();
    _updateControllerText();
    super.initState();
  }

  /// Updates the controller text with the display text generated by [displayTextBuilder].
  void _updateControllerText() {
    _internalController.text = widget.displayTextBuilder(widget.selectedItems);
  }

  @override
  void dispose() {
    if (widget.controller == null) {
      _internalController.dispose();
    }
    super.dispose();
  }

  /// Opens the bottom sheet to display the selectable list.
  void _openBottomSheet(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setModalState) {
            return _content(
              context: context,
              children: List.generate(
                widget.items.length,
                (index) => _widgetGenerator(
                  index: index,
                  setModalState: setModalState,
                ),
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      readOnly: true,
      controller: _internalController,
      decoration: InputDecoration(
        hintText: widget.hintText,
        labelText: widget.label,
        helperText: widget.helperText,
        errorText: widget.errorMessage != '' ? widget.errorMessage : null,
      ),
      onTap: () => _openBottomSheet(context),
    );
  }

  /// Builds the content layout for the bottom sheet.
  Widget _content({
    required BuildContext context,
    required List<Widget> children,
  }) {
    return SizedBox(
      width: context.width,
      height: 250,
      child: SingleChildScrollView(
        child: Column(
          children: children,
        ),
      ),
    );
  }

  /// Generates a checkbox list tile for each selectable item.
  Widget _widgetGenerator({
    required int index,
    required StateSetter setModalState,
  }) {
    final item = widget.items[index];
    return CheckboxListTile(
      value: widget.selectedItems.contains(item),
      title: widget.titleBuilder?.call(item) ?? Text(item),
      onChanged: (bool? value) {
        setModalState(() {
          if (value!) {
            widget.selectedItems.add(item);
          } else {
            widget.selectedItems.remove(item);
          }
        });
        widget.onSelectedItemsChanged(widget.selectedItems);
        _updateControllerText();
      },
    );
  }
}
